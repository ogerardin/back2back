<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>

    <parent>
        <artifactId>back2back</artifactId>
        <groupId>org.ogerardin</groupId>
        <version>1.0-SNAPSHOT</version>
    </parent>

    <artifactId>back2back-dist</artifactId>
    <description>
        This module is responsible for generating the final distributable packages (installer and such).
    </description>

    <properties>
        <izpack.version>5.1.2</izpack.version>
        <nssm.version>2.24</nssm.version>
        <back2back.core.jar>back2back-bundle-standalone.jar</back2back.core.jar>
        <back2back.tray-icon.jar>back2back-system-tray-onejar.jar</back2back.tray-icon.jar>
        <back2back.tray-icon.mainClass>com.simontuffs.onejar.Boot</back2back.tray-icon.mainClass>
        <back2back.service-name>back2back</back2back.service-name>
    </properties>

    <dependencies>
        <dependency>
            <groupId>org.ogerardin</groupId>
            <artifactId>back2back-bundle</artifactId>
            <version>1.0-SNAPSHOT</version>
            <classifier>standalone</classifier>
            <!-- jar is standalone: we don't need transitive dependencies  -->
            <exclusions>
                <exclusion>
                    <groupId>*</groupId>
                    <artifactId>*</artifactId>
                </exclusion>
            </exclusions>
        </dependency>

        <dependency>
            <groupId>org.ogerardin</groupId>
            <artifactId>back2back-system-tray</artifactId>
            <version>1.0-SNAPSHOT</version>
            <classifier>onejar</classifier>
            <!-- jar is standalone: we don't need transitive dependencies  -->
            <exclusions>
                <exclusion>
                    <groupId>*</groupId>
                    <artifactId>*</artifactId>
                </exclusion>
            </exclusions>
        </dependency>

        <dependency>
            <groupId>org.ogerardin</groupId>
            <artifactId>back2back-updater</artifactId>
            <version>1.0-SNAPSHOT</version>
            <classifier>onejar</classifier>
            <!-- jar is standalone: we don't need transitive dependencies  -->
            <exclusions>
                <exclusion>
                    <groupId>*</groupId>
                    <artifactId>*</artifactId>
                </exclusion>
            </exclusions>
        </dependency>

    </dependencies>

    <build>

        <!-- Project resources (other than dependencies). They will go into target/classes -->
        <resources>
            <resource>
                <directory>${basedir}/src/main/resources</directory>
                <filtering>true</filtering>
                <includes>
                    <include>**/*.txt</include>
                    <include>**/*.sh</include>
                    <include>**/*.bat</include>
                    <include>**/*.plist</include>
                </includes>
            </resource>
            <resource>
                <directory>${basedir}/src/main/resources</directory>
                <excludes>
                    <exclude>**/*.txt</exclude>
                    <exclude>**/*.sh</exclude>
                    <exclude>**/*.bat</exclude>
                    <exclude>**/*.plist</exclude>
                </excludes>
            </resource>
            <!-- Include LICENSE.txt file from root module -->
            <resource>
                <directory>..</directory>
                <includes>
                    <include>LICENSE.txt</include>
                </includes>
            </resource>
        </resources>

        <plugins>

            <!-- Don't generate a jar -->
            <plugin>
                <artifactId>maven-jar-plugin</artifactId>
                <executions>
                    <execution>
                        <id>default-jar</id>
                        <phase>none</phase>
                    </execution>
                </executions>
            </plugin>

            <!-- Fetch declared dependencies -->
            <plugin>
                <artifactId>maven-dependency-plugin</artifactId>
                <configuration>
                    <excludeTransitive>false</excludeTransitive>
                    <stripVersion>true</stripVersion>
                    <overWriteReleases>true</overWriteReleases>
                    <overWriteSnapshots>true</overWriteSnapshots>
                    <overWriteIfNewer>true</overWriteIfNewer>
                </configuration>
                <executions>
                    <!-- copy *application* jars to izpack staging lib -->
                    <execution>
                        <id>copy-product-dependencies</id>
                        <phase>prepare-package</phase>
                        <goals>
                            <goal>copy-dependencies</goal>
                        </goals>
                        <configuration>
                            <!-- By default the dependencies are extratcted to target/dependency -->
                            <!--<outputDirectory>${izpack.staging}/lib</outputDirectory>-->
                            <!-- this excludes tools.jar, e.g. -->
                            <includeScope>runtime</includeScope>
                            <!-- IMPORTANT: don't copy custom panels where our application jars live -->
                            <excludeArtifactIds>mycustompanels</excludeArtifactIds>
                            <!-- IMPORTANT: we don't want to copy the IzPack dependency where our application jars live -->
                            <excludeGroupIds>org.codehaus.izpack</excludeGroupIds>
                        </configuration>
                    </execution>
                </executions>
            </plugin>

            <plugin>
                <groupId>com.googlecode.maven-download-plugin</groupId>
                <artifactId>download-maven-plugin</artifactId>
                <version>1.4.0</version>
                <executions>
                    <!-- Download NSSM from https://nssm.cc and unzip it.
                        If you are behind a proxy you may need to pass the corresponding options to maven:
                            -Dhttp.proxyHost=... -Dhttp.proxyPort=...
                    -->
                    <execution>
                        <id>download-nssm</id>
                        <phase>generate-resources</phase>
                        <goals>
                            <goal>wget</goal>
                        </goals>
                        <configuration>
                            <!--<url>http://nssm.cc/release/nssm-${nssm.version}.zip</url>-->
                            <!-- FIXME alternate download link as nssm.cc gives a 503 -->
                            <url>http://ubsms.com/download/tools/nssm-${nssm.version}.zip</url>
                            <!--<md5>be7b3577c6e3a280e5106a9e9db5b3775931cefc</md5>-->
                            <outputDirectory>${project.build.directory}</outputDirectory>
                            <unpack>true</unpack>
                        </configuration>
                    </execution>
                </executions>
            </plugin>

            <plugin>
                <artifactId>maven-antrun-plugin</artifactId>
                <version>1.8</version>
                <!-- Dirty hack due to re-establish file permissions...
                    See https://issues.apache.org/jira/browse/MRESOURCES-132 -->
                <executions>
                    <execution>
                        <id>fix-script-permissions</id>
                        <phase>process-resources</phase>
                        <goals>
                            <goal>run</goal>
                        </goals>
                        <configuration>
                            <target>
                                <chmod file="${project.build.directory}/classes/productbuild/makepackage.sh" perm="755"/>
                                <chmod file="${project.build.directory}/classes/launchd-pkg/scripts/postinstall" perm="755"/>
                                <chmod file="${project.build.directory}/classes/launchd-pkg/scripts/preinstall" perm="755"/>
                            </target>
                        </configuration>
                    </execution>
                </executions>
            </plugin>

            <plugin>
                <groupId>org.codehaus.mojo</groupId>
                <artifactId>exec-maven-plugin</artifactId>
                <version>1.6.0</version>
                <executions>
                    <!-- Use javapackager to generate bundle -->
                    <execution>
                        <id>javapackager</id>
                        <phase>package</phase>
                        <goals>
                            <goal>exec</goal>
                        </goals>
                        <configuration>
                            <!-- HACK ALERT: This will only work with Java 1.8- if we're running with a JRE
                                that is inside a JDK !!! -->
                            <executable>${java.home}/../bin/javapackager</executable>
                            <!--<workingDirectory>${project.build.directory}</workingDirectory>-->
                            <arguments>
                                <argument>-deploy</argument>
                                <argument>-verbose</argument>
                                <argument>-Bruntime=${java.home}</argument>
                                <argument>-native</argument>    <argument>image</argument>
                                <argument>-srcdir</argument>    <argument>${project.build.directory}</argument>
                                <argument>-srcfiles</argument>  <argument>dependency/${back2back.tray-icon.jar}</argument>
                                <argument>-outdir</argument>    <argument>${project.build.directory}</argument>
                                <argument>-outfile</argument>   <argument>MenuIcon.app</argument>
                                <argument>-appclass</argument>  <argument>${back2back.tray-icon.mainClass}</argument>
                                <argument>-name</argument>      <argument>back2back Menu Icon</argument>
                                <argument>-title</argument>     <argument>back2back icon</argument>
                                <argument>-nosign</argument>
                                <argument>-v</argument>
                            </arguments>
                        </configuration>
                    </execution>
                </executions>
            </plugin>

        </plugins>
    </build>

    <profiles>
        <profile>
            <id>generate-archive</id>
            <activation>
                <activeByDefault>true</activeByDefault>
            </activation>
            <build>
                <plugins>
                    <plugin>
                        <artifactId>maven-assembly-plugin</artifactId>
                        <executions>
                            <execution>
                                <id>assembly-dist</id>
                                <phase>package</phase>
                                <goals>
                                    <goal>single</goal>
                                </goals>
                                <configuration>
                                    <descriptors>
                                        <descriptor>src/assembly/dist.xml</descriptor>
                                    </descriptors>
                                    <appendAssemblyId>false</appendAssemblyId>
                                </configuration>
                            </execution>
                        </executions>
                    </plugin>
                </plugins>
            </build>
        </profile>

        <profile>
            <id>generate-izpack-installer</id>
            <activation>
                <activeByDefault>true</activeByDefault>
            </activation>
            <build>
                <plugins>
                    <plugin>
                        <artifactId>maven-dependency-plugin</artifactId>
                        <configuration>
                            <excludeTransitive>false</excludeTransitive>
                            <stripVersion>true</stripVersion>
                            <overWriteReleases>true</overWriteReleases>
                            <overWriteSnapshots>true</overWriteSnapshots>
                            <overWriteIfNewer>true</overWriteIfNewer>
                        </configuration>
                        <executions>
                            <!-- copy izpack custom (custom panels, etc.) jars to izpack staging custom -->
                            <execution>
                                <id>copy-izpack-dependencies</id>
                                <phase>prepare-package</phase>
                                <goals>
                                    <goal>copy-dependencies</goal>
                                </goals>
                                <configuration>
                                    <outputDirectory>${project.build.directory}/custom</outputDirectory>
                                    <!-- IMPORTANT: this causes *only* our custom panels to be copied -->
                                    <includeArtifactIds>mycustompanels</includeArtifactIds>
                                </configuration>
                            </execution>
                        </executions>
                    </plugin>

                    <plugin>
                        <groupId>org.codehaus.izpack</groupId>
                        <artifactId>izpack-maven-plugin</artifactId>
                        <version>${izpack.version}</version>
                        <executions>
                            <execution>
                                <phase>package</phase>
                                <goals>
                                    <goal>izpack</goal>
                                </goals>
                                <configuration>
                                    <!--<autoIncludeDevelopers>true</autoIncludeDevelopers>-->
                                    <!--<autoIncludeUrl>true</autoIncludeUrl>-->
                                    <!-- base for relative paths in izpack descriptor -->
                                    <baseDir>${project.build.directory}</baseDir>
                                    <installFile>${project.basedir}/src/main/izpack/install.xml</installFile>
                                    <finalName>${project.parent.artifactId}-install</finalName>
                                </configuration>
                            </execution>
                        </executions>
                        <dependencies>
                            <dependency>
                                <groupId>org.codehaus.izpack</groupId>
                                <artifactId>izpack-panel</artifactId>
                                <version>${izpack.version}</version>
                            </dependency>
                            <!-- custom panels here -->
                        </dependencies>
                    </plugin>


                </plugins>
            </build>
        </profile>

        <profile>
            <id>generate-mac-installer</id>
            <activation>
                <os>
                    <family>mac</family>
                </os>
            </activation>
            <build>
                <plugins>
                    <plugin>
                        <groupId>org.codehaus.mojo</groupId>
                        <artifactId>exec-maven-plugin</artifactId>
                        <version>1.6.0</version>
                        <executions>
                            <execution>
                                <id>pkgbuild-daemon</id>
                                <phase>package</phase>
                                <goals>
                                    <goal>exec</goal>
                                </goals>
                                <configuration>
                                    <executable>classes/productbuild/makepackage.sh</executable>
                                    <workingDirectory>${project.build.directory}</workingDirectory>
                                </configuration>
                            </execution>
                        </executions>
                    </plugin>
                </plugins>
            </build>
        </profile>
    </profiles>


</project>