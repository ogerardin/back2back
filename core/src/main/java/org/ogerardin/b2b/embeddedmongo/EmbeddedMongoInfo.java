package org.ogerardin.b2b.embeddedmongo;

import de.flapdoodle.embed.mongo.Command;
import de.flapdoodle.embed.mongo.config.DownloadConfigBuilder;
import de.flapdoodle.embed.mongo.distribution.Feature;
import de.flapdoodle.embed.mongo.distribution.IFeatureAwareVersion;
import de.flapdoodle.embed.mongo.distribution.Version;
import de.flapdoodle.embed.mongo.distribution.Versions;
import de.flapdoodle.embed.process.distribution.Distribution;
import de.flapdoodle.embed.process.distribution.GenericVersion;
import de.flapdoodle.embed.process.store.Downloader;
import lombok.val;

import java.io.IOException;
import java.net.URL;
import java.util.Arrays;
import java.util.Properties;

// To invoke this class from a repackaged jar generated by spring-boot-maven-plugin, use this:
// java -cp xxx.jar -Dloader.main=org.ogerardin.b2b.embeddedmongo.EmbeddedMongoInfo org.springframework.boot.loader.PropertiesLauncher
public class EmbeddedMongoInfo {


    public static void main(String args[]) throws IOException {
        val downloadConfig = new DownloadConfigBuilder()
                .defaultsForCommand(Command.MongoD)
                .build();

        IFeatureAwareVersion mongoVersion = getMongoVersion();
        Distribution distribution = Distribution.detectFor(mongoVersion);

        String distributionPath = downloadConfig.getPackageResolver().getPath(distribution);
        String downloadUrl = new Downloader().getDownloadUrl(downloadConfig, distribution);

        System.out.printf("distributionPath=%s%n", distributionPath);
        System.out.printf("downloadUrl=%s%n", downloadUrl);
    }

    /**
     * Return a MongoDB version that matches the
     */
    static IFeatureAwareVersion getMongoVersion() throws IOException {
        Properties properties = getProperties("config/application.properties");

        String mongoVersion = properties.getProperty("spring.mongodb.embedded.version");
        String mongoFeatures = properties.getProperty("spring.mongodb.embedded.features");
        Feature[] featureArray = Arrays.stream(mongoFeatures.split(","))
                .map(String::trim)
                .map(Feature::valueOf)
                .toArray(Feature[]::new);

        return determineVersion(mongoVersion, featureArray);
    }

    private static Properties getProperties(@SuppressWarnings("SameParameterValue") String propertiesFile) throws IOException {
        // read mongo version and features from application.properties
        URL propertiesUrl = StandaloneMongoRunner.class.getClassLoader().getResource(propertiesFile);
        Properties properties = new Properties();
        properties.load(propertiesUrl.openStream());
        return properties;
    }

    private static IFeatureAwareVersion determineVersion(String ver, Feature... features) {
        for (Version version : Version.values()) {
            if (version.asInDownloadPath().equals(ver)) {
                return version;
            }
        }
        return Versions.withFeatures(new GenericVersion(ver), features);
    }

}
